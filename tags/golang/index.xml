<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Yingchi Blog</title>
    <link>https://blog.yingchi.io/tags/golang.html</link>
    <description>Recent content in golang on Yingchi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2021 Joey.Jiang</copyright>
    <lastBuildDate>Sat, 15 Aug 2020 14:21:43 +0800</lastBuildDate>
    
	<atom:link href="https://blog.yingchi.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解 Golang Context 机制</title>
      <link>https://blog.yingchi.io/posts/2020/8/go-context.html</link>
      <pubDate>Sat, 15 Aug 2020 14:21:43 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/8/go-context.html</guid>
      <description>&lt;p&gt;在使用 Golang 的一些框架的时候，比如 Gin，每一个请求的 Handler 方法总是需要传递进去一个 &lt;strong&gt;context&lt;/strong&gt; 对象，然后很多请求数据，比如请求参数，路径变量等都可以从中读出来，其实在这个使用过程中已经大体理解了这个 context 是个什么东西，但是对于其中的一些细节包括具体的使用方式还是缺乏了解，因此本文就针对 golang 里面的 context 概念进行简单的探讨。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅析并发模型：共享内存/Actor/CSP</title>
      <link>https://blog.yingchi.io/posts/2020/6/concurrent-pattern.html</link>
      <pubDate>Thu, 25 Jun 2020 17:42:29 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/6/concurrent-pattern.html</guid>
      <description>Golang 编程中，涉及到并发问题时，通常有以下两种解决方案： 采用共享内存模型，利用 sync.Mutex / sync.RWMutex 等加锁、设置临界区解决数据并发访问问题； 采用消息通信模型，利</description>
    </item>
    
    <item>
      <title>Goroutine 并发模型</title>
      <link>https://blog.yingchi.io/posts/2020/3/go-goroutine.html</link>
      <pubDate>Sat, 14 Mar 2020 11:53:31 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/3/go-goroutine.html</guid>
      <description>并发基础 在学习 Goroutine 之前，如果对于 Linux 基本的并发模型不了解，那么可能会学的一头雾水，所以一切的一切之前，从 Linux 基本的并发知识说起，复习一下。 并发与并</description>
    </item>
    
    <item>
      <title>哈希表原理 &amp; Go Map 实现</title>
      <link>https://blog.yingchi.io/posts/2020/3/go-map.html</link>
      <pubDate>Tue, 10 Mar 2020 11:23:08 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/3/go-map.html</guid>
      <description>Go Map 也就是所谓的“ HashTable ”数据结构，有些语言，比如 Python 中称作“字典”，但是无论如何都是一种东西。 HashTable 最重要的特点是： 提供键值对形式的的存储结构，即提</description>
    </item>
    
    <item>
      <title>Go Array 与 Slice 原理</title>
      <link>https://blog.yingchi.io/posts/2020/3/go-array-slice.html</link>
      <pubDate>Thu, 05 Mar 2020 19:42:31 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/3/go-array-slice.html</guid>
      <description>数组 Array 几乎每个常见的编程语言都有数组这个概念，但是每个语言对于数组的定位都不一样，有的语言会把数组用作常用的基本的数据结构，比如 JavaSc</description>
    </item>
    
  </channel>
</rss>