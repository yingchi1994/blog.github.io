<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Yingchi Blog</title>
    <link>https://blog.yingchi.io/tags/kubernetes.html</link>
    <description>Recent content in kubernetes on Yingchi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2021 Joey.Jiang</copyright>
    <lastBuildDate>Wed, 12 Aug 2020 21:55:13 +0800</lastBuildDate>
    
	<atom:link href="https://blog.yingchi.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>循序渐进理解CNI机制与Flannel工作原理</title>
      <link>https://blog.yingchi.io/posts/2020/8/k8s-flannel.html</link>
      <pubDate>Wed, 12 Aug 2020 21:55:13 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/8/k8s-flannel.html</guid>
      <description>&lt;p&gt;CNI，它的全称是 Container Network Interface，即容器网络的 API 接口。kubernetes 网络的发展方向是希望通过插件的方式来集成不同的网络方案， CNI 就是这一努力的结果。CNI 只专注解决容器网络连接和容器销毁时的资源释放，提供一套框架，所以 CNI 可以支持大量不同的网络模式，并且容易实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解读 kubernetes Controller Manager 工作原理</title>
      <link>https://blog.yingchi.io/posts/2020/7/k8s-cm-informer.html</link>
      <pubDate>Fri, 24 Jul 2020 23:41:26 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/7/k8s-cm-informer.html</guid>
      <description>&lt;p&gt;kubernetes master 节点最重要的三个组件是：kube-apiserver、kube-controller-manager、kube-scheduler，分别负责 kubernetes 集群的资源访问入口、集群状态管理、资源调度。&lt;/p&gt;
&lt;p&gt;这篇文章的主角就是其中的 kube-controller-manager 组件，分析一下它以及其核心组件 informer 是如何有效管理集群状态的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一文读懂 Kubernetes RBAC 机制</title>
      <link>https://blog.yingchi.io/posts/2020/7/k8s-rbac.html</link>
      <pubDate>Thu, 23 Jul 2020 21:15:06 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/7/k8s-rbac.html</guid>
      <description>&lt;p&gt;之前在做 PaaS 平台开发时涉及到租户的权限管理，考虑到 Kubernetes 默认提供了 RBAC（基于角色的访问控制）机制，于是想如何利用好 Kubernetes 的 RBAC 来实现。但是开始学习这块儿知识的时候还是遇到了一些问题，比如 Role 和 ClusterRole，Role Binding 和 ClusterRoleBinding，很多概念是比较模糊的，随着后来深入的学习了解和实践才算理清它们之间的关系，这篇文章就是分享一下这期间学到的内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes API Server 认证与授权机制</title>
      <link>https://blog.yingchi.io/posts/2020/7/k8s-authn-authz.html</link>
      <pubDate>Sun, 19 Jul 2020 19:54:22 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/7/k8s-authn-authz.html</guid>
      <description>&lt;p&gt;kube-apiserver 是 kubernetes 的网关性质的组件，是 kubernetes 集群资源操作的唯一入口，因此像认证与授权等一些过程很明显是要基于这个组件实施。kubernetes 集群的所有操作基本上都是通过 apiserver 这个组件进行的，它提供 HTTP RESTful 形式的 API 供集群内外客户端调用。kubernetes 对于访问 API 来说提供了三个步骤的安全措施：认证、授权、准入控制，当用户使用 kubectl，client-go 或者 REST API 请求 apiserver 时，都要经过这三个步骤的校验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2020 年 6 月 CKA 认证通过分享</title>
      <link>https://blog.yingchi.io/posts/2020/6/cka-note.html</link>
      <pubDate>Mon, 29 Jun 2020 22:43:03 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/6/cka-note.html</guid>
      <description>CKA (Certified Kubernetes Administrator)认证是由 CNCF 与 Linux Foundation 管理的与 Kubernetes 运维技能相关的一个认证，目前业内对于云原生这一块儿专门的认证还是比较少的。自己目</description>
    </item>
    
    <item>
      <title>client-go 初步认识与实践</title>
      <link>https://blog.yingchi.io/posts/2020/5/client-go.html</link>
      <pubDate>Sat, 23 May 2020 12:21:08 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/5/client-go.html</guid>
      <description>最近本人的一个容器应用管理平台项目需要实现对接 Kubernetes 平台并进行一些相关资源的操作，查阅了官方文档、GitHub 以及相关技术文章，发现有个叫做 client-go 的</description>
    </item>
    
    <item>
      <title>Linux Netfilter/iptables 学习</title>
      <link>https://blog.yingchi.io/posts/2020/5/linux-iptables.html</link>
      <pubDate>Thu, 14 May 2020 17:35:21 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/5/linux-iptables.html</guid>
      <description>Linux 网络协议栈非常高效，同时比较复杂。如果我们希望在数据的处理过程中对关心的数据进行一些操作，则该怎么做呢？Linux 提供了一套机制来为用户实</description>
    </item>
    
    <item>
      <title>Kubernetes &amp; Docker 网络原理（三）</title>
      <link>https://blog.yingchi.io/posts/2020/4/docker-k8s-network-3.html</link>
      <pubDate>Mon, 13 Apr 2020 20:26:41 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/4/docker-k8s-network-3.html</guid>
      <description>Service 通信 kube-proxy 运行机制 为了支持集群的水平扩展、高可用性，Kubernetes抽象出了Service的概念。Service是对一组Pod的抽象，它会</description>
    </item>
    
    <item>
      <title>Kubernetes &amp; Docker 网络原理（二）</title>
      <link>https://blog.yingchi.io/posts/2020/4/docker-k8s-network-2.html</link>
      <pubDate>Sun, 12 Apr 2020 21:45:23 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/4/docker-k8s-network-2.html</guid>
      <description>Kubernetes Pod 间通信 之前的文章中主要关于 Docker 的网络实现进行了介绍和探讨，对于 Docker 网络而言，其最大的局限性在于跨主机的容器通信方案上存在空白，而 Kubernetes 作为适合大</description>
    </item>
    
    <item>
      <title>Kubernetes &amp; Docker 网络原理（一）</title>
      <link>https://blog.yingchi.io/posts/2020/4/docker-k8s-network-1.html</link>
      <pubDate>Sat, 11 Apr 2020 22:14:12 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/4/docker-k8s-network-1.html</guid>
      <description>Docker 网络实现 平时在进行 Kubernetes 开发和运维的时候，接触到的最多的概念应该就是 Docker 与 Kubernetes 的网络概念了，尤其是 Kubernetes，各种各样的 IP，Port，</description>
    </item>
    
    <item>
      <title>理解 Kubernetes 的 Resource 设计概念</title>
      <link>https://blog.yingchi.io/posts/2020/4/kubernetes-resources.html</link>
      <pubDate>Tue, 07 Apr 2020 15:34:33 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/4/kubernetes-resources.html</guid>
      <description>Kubernetes 是一个完全以资源为中心的容器编排平台，这一点从 kube-apiserver 对外暴露的 REST API 设计上其实就能很明显地感受到。Kubernetes 的生态系统围绕着诸多组件资</description>
    </item>
    
    <item>
      <title>Kubernetes Rolling Update 滚动升级</title>
      <link>https://blog.yingchi.io/posts/2020/4/kubernetes-rolling-update.html</link>
      <pubDate>Sun, 05 Apr 2020 21:03:12 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/4/kubernetes-rolling-update.html</guid>
      <description>用户希望应用程序始终可用，而开发人员则需要每天多次部署它们的新版本。在 Kubernetes 中，这些是通过滚动更新（Rolling Updates）完成的。 滚动更</description>
    </item>
    
    <item>
      <title>Kubernetes 架构浅析</title>
      <link>https://blog.yingchi.io/posts/2020/4/kubernetes-arch.html</link>
      <pubDate>Sun, 05 Apr 2020 21:03:12 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/4/kubernetes-arch.html</guid>
      <description>前言 Kubernetes 就像它在英语中原意“舵手”一样，指挥，调度&amp;hellip; 它的定位就是这么一个容器编排调度基础平台，来源于 Google 内部的容器集群管理平台 Bo</description>
    </item>
    
    <item>
      <title>记一次 Kubeadm 部署 k8s &#43; Flannel</title>
      <link>https://blog.yingchi.io/posts/2020/4/kubeadm-flannel-mannul.html</link>
      <pubDate>Fri, 03 Apr 2020 14:51:38 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2020/4/kubeadm-flannel-mannul.html</guid>
      <description>以 master 节点的配置为例记录一下在 CentOS 7.0 上使用 kubeadm 部署 kubernetes 集群 + Flannel 插件的过程 一、基础环境配置 安装 wget yum install -y wget 配置 YUM 软件源 配置阿里镜像源 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 配置 kubernetes 源 vi /etc/yum.repos.d/kubernetes.repo</description>
    </item>
    
    <item>
      <title>网络模型学习基础：各层网络设备概念</title>
      <link>https://blog.yingchi.io/posts/2019/10/network-devices.html</link>
      <pubDate>Sun, 27 Oct 2019 00:29:30 +0800</pubDate>
      
      <guid>https://blog.yingchi.io/posts/2019/10/network-devices.html</guid>
      <description>在学习研究诸如 kubernetes 网络或 Docker 网络等各种开源网络模型时，会涉及到各种或实际或虚拟的网络设备概念，例如各种虚拟网桥。因此必须对这些网络设备有充分的认</description>
    </item>
    
  </channel>
</rss>